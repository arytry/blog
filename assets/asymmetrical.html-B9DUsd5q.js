import{_ as n,c as s,o as a,e}from"./app-0TPXc-ei.js";const p="/assets/img/algorithms/digital-signature.png",t={},c=e('<h1 id="非对称加密" tabindex="-1"><a class="header-anchor" href="#非对称加密"><span>非对称加密</span></a></h1><p>与对称加密不同的是，非对称加密需要两把密钥（公钥和私钥）</p><div class="custom-container warning"><p class="custom-container-title">备注</p><p>并不是只会通过公钥加密私钥解密。在数字签名中刚好相反，是通过私钥加密公钥解密</p></div><h2 id="rsa" tabindex="-1"><a class="header-anchor" href="#rsa"><span>RSA</span></a></h2><p><code>RSA</code>是非对称加密中比较常用的方式</p><h2 id="数字签名" tabindex="-1"><a class="header-anchor" href="#数字签名"><span>数字签名</span></a></h2><p>数字签名是一个带有密钥的消息摘要算法，这个密钥包括了公钥和私钥，用于验证数据完整性、认证数据来源和抗否认，遵循OSI参考模型、<code>私钥签名</code>和<code>公钥验证</code>。也是非对称加密算法和消息摘要算法的结合体，常见的数字签名算法主要有RSA、DSA、ECDSA三种，本文对数字签名算法进行详细介绍。</p><p><img src="'+p+`" alt="数字签名" title="数字签名"></p><p>生成密钥对</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token doc-comment comment">/// Get public key and private key.</span></span>
<span class="line"><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">string</span> privateKey<span class="token punctuation">,</span> <span class="token keyword">string</span> publicKey<span class="token punctuation">)</span></span> <span class="token function">GetKeyFromContainer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> containerName<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果是分开生成公钥和私钥，通过指定相同的containerName保持一致性</span></span>
<span class="line">    <span class="token comment">// 如果是同时生成公钥和私钥，可以不提供&lt;seealso cref=&quot;CspParameters&quot;/&gt;参数</span></span>
<span class="line">    <span class="token comment">//var cp = new CspParameters</span></span>
<span class="line">    <span class="token comment">//{</span></span>
<span class="line">    <span class="token comment">//    KeyContainerName = containerName</span></span>
<span class="line">    <span class="token comment">//};</span></span>
<span class="line">    <span class="token comment">//var rsa = new RSACryptoServiceProvider(cp);</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> rsa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RSACryptoServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>rsa<span class="token punctuation">.</span><span class="token function">ToXmlString</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rsa<span class="token punctuation">.</span><span class="token function">ToXmlString</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">EncryptHash</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> privateKey<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> fileHash<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> rsa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RSACryptoServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    rsa<span class="token punctuation">.</span><span class="token function">FromXmlString</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> rsaFormatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RSAPKCS1SignatureFormatter</span><span class="token punctuation">(</span>rsa<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    rsaFormatter<span class="token punctuation">.</span><span class="token function">SetHashAlgorithm</span><span class="token punctuation">(</span><span class="token string">&quot;MD5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> rsaFormatter<span class="token punctuation">.</span><span class="token function">CreateSignature</span><span class="token punctuation">(</span>fileHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">DecryptHash</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> publicKey<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> fileHash<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> electronicSignature<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> rsa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RSACryptoServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    rsa<span class="token punctuation">.</span><span class="token function">FromXmlString</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> rsaDeformatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RSAPKCS1SignatureDeformatter</span><span class="token punctuation">(</span>rsa<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    rsaDeformatter<span class="token punctuation">.</span><span class="token function">SetHashAlgorithm</span><span class="token punctuation">(</span><span class="token string">&quot;MD5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> rsaDeformatter<span class="token punctuation">.</span><span class="token function">VerifySignature</span><span class="token punctuation">(</span>fileHash<span class="token punctuation">,</span> electronicSignature<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),l=[c];function o(i,r){return a(),s("div",null,l)}const k=n(t,[["render",o],["__file","asymmetrical.html.vue"]]),d=JSON.parse('{"path":"/algorithms/encryption/asymmetrical.html","title":"非对称加密","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"RSA","slug":"rsa","link":"#rsa","children":[]},{"level":2,"title":"数字签名","slug":"数字签名","link":"#数字签名","children":[]}],"git":{},"filePathRelative":"algorithms/encryption/asymmetrical.md"}');export{k as comp,d as data};
