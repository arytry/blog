import{_ as t,c as e,o as a,e as r}from"./app-0TPXc-ei.js";const i={},l=r('<h1 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h1><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p><p>结构型模式包含以下几种模式：</p><ul><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>过滤器模式（Filter、Criteria Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ul>',4),n=[l];function s(c,o){return a(),e("div",null,n)}const p=t(i,[["render",s],["__file","index.html.vue"]]),_=JSON.parse('{"path":"/design-pattern/structural/","title":"介绍","lang":"zh-CN","frontmatter":{},"headers":[],"git":{},"filePathRelative":"design-pattern/structural/README.md"}');export{p as comp,_ as data};
