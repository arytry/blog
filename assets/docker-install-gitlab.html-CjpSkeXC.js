import{_ as l,c as i,b as s,d as a,a as t,w as p,e as n,r as c,o as r}from"./app-0TPXc-ei.js";const o={},d=n(`<h1 id="docker安装gitlab" tabindex="-1"><a class="header-anchor" href="#docker安装gitlab"><span>docker安装gitlab</span></a></h1><h2 id="安装gitlab" tabindex="-1"><a class="header-anchor" href="#安装gitlab"><span>安装gitlab</span></a></h2><div class="custom-container warning"><p class="custom-container-title">提示</p><p>gitlab的坑比较奇葩，如果已经了解过，可以直接查看<a href="#%E5%AE%8C%E6%95%B4%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE">完整安装步骤</a></p></div><h3 id="安装运行" tabindex="-1"><a class="header-anchor" href="#安装运行"><span>安装运行</span></a></h3><p>搜索gitlab</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> search gitlab</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>拉取gitlab镜像，其中gitlab-ce为社区版，gitlab-ee为企业版，这里我们拉取社区版即可</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> pull gitlab/gitlab-ce</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行gitlab-ce容器</p><h4 id="使用默认端口启动gitlab" tabindex="-1"><a class="header-anchor" href="#使用默认端口启动gitlab"><span>使用默认端口启动gitlab</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> gitlab <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-p</span> <span class="token number">443</span>:443 <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-p</span> <span class="token number">22</span>:22 <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> /srv/gitlab/etc:/etc/gitlab <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> /srv/gitlab/log:/var/log/gitlab <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> /srv/gitlab/opt:/var/opt/gitlab <span class="token punctuation">\\</span></span>
<span class="line">    gitlab/gitlab-ce</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-v /srv/gitlab/etc:/etc/gitlab</code> 配置文件目录映射</li><li><code>-v /srv/gitlab/log:/var/log/gitlab</code> 日志文件目录映射到</li><li><code>-v /srv/gitlab/opt:/var/opt/gitlab</code> 数据文件目录映射</li></ul><h4 id="使用非默认端口启动gitlab-推荐" tabindex="-1"><a class="header-anchor" href="#使用非默认端口启动gitlab-推荐"><span>使用非默认端口启动gitlab（推荐）</span></a></h4><p>使用默认端口我们经常会遇到以下端口占用问题，即便没有占用，一般也会预留出来：</p><ul><li><code>80</code>端口为web服务的默认端口，nginx等服务都是使用的此端口；</li><li><code>22</code>端口为远程ssh默认端口，基本上Linux服务器都会开启</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> gitlab <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-p</span> <span class="token number">443</span>:443 <span class="token parameter variable">-p</span> <span class="token number">10080</span>:80 <span class="token parameter variable">-p</span> <span class="token number">222</span>:22 <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> /srv/gitlab/etc:/etc/gitlab <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> /srv/gitlab/log:/var/log/gitlab <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> /srv/gitlab/opt:/var/opt/gitlab <span class="token punctuation">\\</span></span>
<span class="line">    gitlab/gitlab-ce</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们就可以通过访问<code>http://ip:10080</code>地址查看gitlab UI了</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><h4 id="仓库地址" tabindex="-1"><a class="header-anchor" href="#仓库地址"><span>仓库地址</span></a></h4><p>默认情况下，当我们创建一个项目后，在Clone的时候显示的仓库地址为容器ID，这显然在外部是无法访问的，需要改成宿主机IP+端口才行。</p><ul><li>查找gitlab.rb文件</li></ul><ol><li><p>容器中查找</p><p>如果容器没有做<code>配置文件</code>目录映射，可以进入容器修改</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> gitlab /bin/bash</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>容器内的<code>gitlab.rb</code>文件路径为<code>/etc/gitlab/gitlab.rb</code></p></li><li><p>宿主机查找</p><p>如果做了<code>配置文件</code>目录映射，可以直接在宿主机中找到该文件修改即可，具体请查看<code>配置文件</code>映射目录</p></li></ol><ul><li>修改gitlab.rb文件</li></ul><p>将<code>external_url</code>参数设置为外部主机地址</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 这段为原始需要修改的代码，找到该行代码修改</span></span>
<span class="line"><span class="token comment"># external_url &#39;GENERATED_EXTERNAL_URL&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 假设宿主机IP为\`192.168.222.136\`</span></span>
<span class="line"><span class="token comment"># 配置http协议所使用的访问地址，这里端口号也指向内部映射端口号，所以在映射时需要指定相同的端口号</span></span>
<span class="line">external_url <span class="token string">&#39;http://192.168.222.136:10080&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 配置ssh协议所使用的访问地址和端口</span></span>
<span class="line">gitlab_rails<span class="token punctuation">[</span><span class="token string">&#39;gitlab_ssh_host&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;192.168.222.136&#39;</span></span>
<span class="line">gitlab_rails<span class="token punctuation">[</span><span class="token string">&#39;gitlab_shell_ssh_port&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">222</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重启gitlab</li></ul><p>修改gitlab.rb文件后，需要重启gitlab才会生效</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> restart gitlab</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><em>等待重启成功后再次访问<code>http://ip:10080</code>地址试试，是不是连UI都不能打开了？</em></p></blockquote><p>其实这是gitlab的一个坑，原因是使用非默认http端口<code>80</code>映射，如果修改<code>external_url</code>地址为<code>http://ip:10080</code>，相当于也将（容器）内部的端口号修改为<code>10080</code>了，而此时映射的端口号还是<code>80</code>，自然就无法访问了</p>`,30),u=s("code",null,"10080",-1),b=n(`<h3 id="完整安装配置" tabindex="-1"><a class="header-anchor" href="#完整安装配置"><span>完整安装配置</span></a></h3><ul><li>安装启动gitlab</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> gitlab <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-p</span> <span class="token number">443</span>:443 <span class="token parameter variable">-p</span> <span class="token number">10080</span>:10080 <span class="token parameter variable">-p</span> <span class="token number">222</span>:22 <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> /srv/gitlab/etc:/etc/gitlab <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> /srv/gitlab/log:/var/log/gitlab <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> /srv/gitlab/opt:/var/opt/gitlab <span class="token punctuation">\\</span></span>
<span class="line">    gitlab/gitlab-ce</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改gitlab.rb</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">vim</span> /srv/gitlab/etc/gitlab.rb</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 配置http协议所使用的访问地址，这里端口号也指向内部映射端口号，所以在映射时需要指定相同的端口号</span></span>
<span class="line">external_url <span class="token string">&#39;http://192.168.222.136:10080&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 配置ssh协议所使用的访问地址和端口</span></span>
<span class="line">gitlab_rails<span class="token punctuation">[</span><span class="token string">&#39;gitlab_ssh_host&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;192.168.222.136&#39;</span></span>
<span class="line">gitlab_rails<span class="token punctuation">[</span><span class="token string">&#39;gitlab_shell_ssh_port&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">222</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重启gitlab</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> restart gitlab</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose"><span>docker-compose</span></a></h2><ol><li><p>如果服务器上还没有<code>docker-compose</code>，我们需要先<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener noreferrer">安装docker-compose</a></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># unbuntu</span></span>
<span class="line"><span class="token function">apt</span> <span class="token function">install</span> <span class="token function">docker-compose</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建<code>docker-compose.yml</code>文件</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.3&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">gitlab</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> bridge <span class="token comment"># do not create new network</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;gitlab/gitlab-ce&#39;</span></span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> gitlab</span>
<span class="line">    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> <span class="token string">&#39;192.168.37.128&#39;</span>   <span class="token comment"># server ip</span></span>
<span class="line">    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always</span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">GITLAB_OMNIBUS_CONFIG</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">        external_url &#39;http://192.168.37.128&#39;  # the same as hostname, custom port number</span>
<span class="line">        gitlab_rails[&#39;gitlab_ssh_host&#39;] = &#39;192.168.37.128&#39;</span>
<span class="line">        gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] = 222</span>
<span class="line">        # Add any other gitlab.rb configuration here, each on its own line</span></span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;80:80&quot;</span> <span class="token comment"># port is the same as external_url</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;443:443&quot;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;222:22&quot;</span> <span class="token comment"># port is the same as gitlab_shell_ssh_port</span></span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> /srv/gitlab/etc<span class="token punctuation">:</span>/etc/gitlab</span>
<span class="line">      <span class="token punctuation">-</span> /srv/gitlab/opt<span class="token punctuation">:</span>/var/opt/gitlab</span>
<span class="line">      <span class="token punctuation">-</span> /srv/gitlab/log<span class="token punctuation">:</span>/var/log/gitlab</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>确保与<code>docker-compose.yml</code>文件在同一目录下并启动它</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h2 id="初始账号" tabindex="-1"><a class="header-anchor" href="#初始账号"><span>初始账号</span></a></h2><p>在安装完启动 GitLab 后，应该就可以在网页上访问到 GitLab 的登录界面了，不过 GitLab 已事先创建了一个账号，这个账号就是管理员账号。即便是注册新 GitLab 账号，也需要登录管理员账号进行审批。那么这个管理员账号和密码各是什么呢？</p><p>这个管理员账号的用户名为<code>root</code>，而密码在一个自动生成的文件<code>/etc/gitlab/initial_root_password</code>中，且会在 24 小时后自动被删除。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 进入gitlab容器</span></span>
<span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> gitlab /bin/bash</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看初始密码</span></span>
<span class="line"><span class="token function">cat</span> /etc/gitlab/initial_root_password</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>登录GitLab后可以在管理界面修改密码，密码至少需要8个字符</p><h2 id="相关链接" tabindex="-1"><a class="header-anchor" href="#相关链接"><span>相关链接</span></a></h2><ul><li><p><a href="https://www.jianshu.com/p/080a962c35b6" title="docker下gitlab安装配置使用(完整版)" target="_blank" rel="noopener noreferrer">docker下gitlab安装配置使用(完整版)</a></p></li><li><p><a href="https://www.cnblogs.com/poloyy/p/13968683.html" title="Docker - 解决 gitlab 容器上的项目进行 clone 时，IP 地址显示一串数字而不是正常 IP 地址的问题" target="_blank" rel="noopener noreferrer">Docker - 解决 gitlab 容器上的项目进行 clone 时，IP 地址显示一串数字而不是正常 IP 地址的问题</a></p></li><li><p><a href="https://www.jianshu.com/p/230699d9c183" title="Docker 安装 Gitlab，external_url非80端口无法访问" target="_blank" rel="noopener noreferrer">Docker 安装 Gitlab，external_url非80端口无法访问</a></p></li></ul>`,17);function v(m,g){const e=c("RouteLink");return r(),i("div",null,[d,s("p",null,[a("要解决此问题只需要把映射的容器端口改为"),u,a("。可以通过"),t(e,{to:"/docker-container-nat/"},{default:p(()=>[a("docker容器端口映射")]),_:1}),a("修改容器端口号，或者直接移除容器然后重新安装启动")]),b])}const k=l(o,[["render",v],["__file","docker-install-gitlab.html.vue"]]),_=JSON.parse('{"path":"/docker/instance/docker-install-gitlab.html","title":"docker安装gitlab","lang":"zh-CN","frontmatter":{"date":"2021-01-25T18:24:22.000Z","categories":["gitlab"],"tags":["gitlab"]},"headers":[{"level":2,"title":"安装gitlab","slug":"安装gitlab","link":"#安装gitlab","children":[{"level":3,"title":"安装运行","slug":"安装运行","link":"#安装运行","children":[]},{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":3,"title":"完整安装配置","slug":"完整安装配置","link":"#完整安装配置","children":[]}]},{"level":2,"title":"docker-compose","slug":"docker-compose","link":"#docker-compose","children":[]},{"level":2,"title":"初始账号","slug":"初始账号","link":"#初始账号","children":[]},{"level":2,"title":"相关链接","slug":"相关链接","link":"#相关链接","children":[]}],"git":{},"filePathRelative":"docker/instance/docker-install-gitlab.md"}');export{k as comp,_ as data};
