import{_ as n,c as e,o as s,e as a}from"./app-0TPXc-ei.js";const i={},l=a(`<h1 id="docker安装jenkins" tabindex="-1"><a class="header-anchor" href="#docker安装jenkins"><span>docker安装jenkins</span></a></h1><h2 id="运行容器" tabindex="-1"><a class="header-anchor" href="#运行容器"><span>运行容器</span></a></h2><p>执行以下命令</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 搜索Jenkins</span></span>
<span class="line"><span class="token function">docker</span> search jenkins</span>
<span class="line"></span>
<span class="line"><span class="token comment"># jenkins镜像为官方镜像，docker hub中提到已经弃用[deprecated]，推荐使用jenkins/jenkins</span></span>
<span class="line"><span class="token function">docker</span> pull jenkins/jenkins<span class="token punctuation">[</span>:latest<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-u</span> root <span class="token parameter variable">--name</span><span class="token operator">=</span>jenkins <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">-p</span> <span class="token number">50000</span>:50000 <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> <span class="token function">docker</span><span class="token variable">)</span></span>:/usr/bin/docker <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> <span class="token function">docker-compose</span><span class="token variable">)</span></span>:/usr/bin/docker-compose <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> /srv/jenkins/opt:/var/jenkins_home <span class="token punctuation">\\</span></span>
<span class="line">    jenkins/jenkins</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/bin/docker</code> 将jenkins容器内的docker命令指向了宿主机，结合<code>-u root</code>在容器中才有权限执行docker命令</li><li><code>-v $(which docker-compose):/usr/bin/docker-compose \\</code> 容器内的docker-compose命令指向宿主机</li><li><code>-v /srv/jenkins/opt:/var/jenkins_home</code> 将docker里jenkins工作目录<code>/var/jenkins_home</code>挂载到宿主机的<code>/srv/jenkins/var/jenkins_home</code><blockquote><p><code>-v jenkins:/var/jenkins_home</code> 将docker里jenkins工作目录<code>/var/jenkins_home</code>挂载到本地容器卷<code>/var/lib/docker/volumes</code>下面的<code>jenkins</code>目录</p></blockquote></li></ul><p>此时如果访问8080端口是访问不了的，我们查看日志可以看到一段代码</p><blockquote><p>cannot touch &#39;/var/jenkins_home/copy_reference_file.log&#39;: Permission denied</p></blockquote><p>大概意思就是没有权限访问映射工作目录，因为jenkins容器中jenkins用户id为1000，而本地用户权限为root，所以把当前目录的拥有者赋值给uid 1000，再启动&quot;jenkins&quot;容器就一切正常了</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token number">1000</span> /srv/jenkins/opt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="初始密码" tabindex="-1"><a class="header-anchor" href="#初始密码"><span>初始密码</span></a></h2><p>首次打开Jenkins页面后需要输入初始密码，默认账号为admin</p><p>可以通过日志查看</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> logs jenkins</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果日志太多不方便查找，也可以在<code>/var/jenkins_home/secrets/initialAdminPassword</code>文件中查看</p><p>由于我们做了工作目录映射，所以直接在宿主机中可以找到该文件</p><p>登录后可以新建一个用户，也可以默认使用当前admin账户，可以安装所有推荐的插件</p><h2 id="相关链接" tabindex="-1"><a class="header-anchor" href="#相关链接"><span>相关链接</span></a></h2><ul><li><a href="https://www.jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener noreferrer">安装Jenkins</a></li><li><a href="https://juejin.cn/post/7219899306946199610" target="_blank" rel="noopener noreferrer">jenkins 容器环境中调用docker</a></li><li><a href="https://blog.csdn.net/zsd498537806/article/details/81132522" target="_blank" rel="noopener noreferrer">Docker中启动jenkins容器，并在jenkins中使用docker 命令，解决docker command not found</a></li><li><a href="https://blog.csdn.net/fly910905/article/details/117254938" target="_blank" rel="noopener noreferrer">Docker-in-Docker: Jenkins CI 内部如何运行 docker</a></li><li><a href="https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/" target="_blank" rel="noopener noreferrer">Using Docker-in-Docker for your CI or testing environment? Think twice.</a></li></ul>`,19),r=[l];function o(c,t){return s(),e("div",null,r)}const d=n(i,[["render",o],["__file","docker-install-jenkins.html.vue"]]),k=JSON.parse('{"path":"/docker/instance/docker-install-jenkins.html","title":"docker安装jenkins","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"运行容器","slug":"运行容器","link":"#运行容器","children":[]},{"level":2,"title":"初始密码","slug":"初始密码","link":"#初始密码","children":[]},{"level":2,"title":"相关链接","slug":"相关链接","link":"#相关链接","children":[]}],"git":{},"filePathRelative":"docker/instance/docker-install-jenkins.md"}');export{d as comp,k as data};
