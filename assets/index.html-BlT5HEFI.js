import{_ as l,c as r,b as t,a as n,w as a,r as s,o as i,d as o}from"./app-0TPXc-ei.js";const c={},d=t("h1",{id:"介绍",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#介绍"},[t("span",null,"介绍")])],-1),_=t("p",null,"这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。",-1),h=t("p",null,"创建型模式包括以下几种模式：",-1),p=t("li",null,"抽象工厂模式（Abstract Factory Pattern）",-1),u=t("li",null,"建造者模式（Builder Pattern）",-1),m=t("li",null,"原型模式（Prototype Pattern）",-1);function f(g,x){const e=s("RouteLink");return i(),r("div",null,[d,_,h,t("ul",null,[t("li",null,[n(e,{to:"/design-pattern/creational/factory-pattern.html"},{default:a(()=>[o("工厂模式（Factory Pattern）")]),_:1})]),p,t("li",null,[n(e,{to:"/design-pattern/creational/singleton-pattern.html"},{default:a(()=>[o("单例模式（Singleton Pattern）")]),_:1})]),u,m])])}const N=l(c,[["render",f],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/design-pattern/creational/","title":"介绍","lang":"zh-CN","frontmatter":{},"headers":[],"git":{},"filePathRelative":"design-pattern/creational/README.md"}');export{N as comp,k as data};
