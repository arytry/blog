import{_ as s,c as n,o as a,e}from"./app-0TPXc-ei.js";const t={},p=e(`<h1 id="grpc" tabindex="-1"><a class="header-anchor" href="#grpc"><span>GRPC</span></a></h1><p>gRPC 服务可以有不同类型的方法。 服务发送和接收消息的方式取决于所定义的方法的类型。 gRPC 方法类型如下：</p><ul><li>一元</li><li>服务器流式处理</li><li>客户端流式处理</li><li>双向流式处理</li></ul><p>流式处理调用是使用<code>stream</code>关键字在<code>.proto</code>文件中指定的。<code>stream</code>可以放置在调用的请求消息和/或响应消息中。</p><div class="language-protobuf line-numbers-mode" data-highlighter="prismjs" data-ext="protobuf" data-title="protobuf"><pre class="language-protobuf"><code><span class="line"><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">service</span> <span class="token class-name">ExampleService</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Unary</span></span>
<span class="line">  <span class="token keyword">rpc</span> <span class="token function">UnaryCall</span> <span class="token punctuation">(</span><span class="token class-name">ExampleRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">ExampleResponse</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Server streaming</span></span>
<span class="line">  <span class="token keyword">rpc</span> <span class="token function">StreamingFromServer</span> <span class="token punctuation">(</span><span class="token class-name">ExampleRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token keyword">stream</span> <span class="token class-name">ExampleResponse</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Client streaming</span></span>
<span class="line">  <span class="token keyword">rpc</span> <span class="token function">StreamingFromClient</span> <span class="token punctuation">(</span><span class="token keyword">stream</span> <span class="token class-name">ExampleRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">ExampleResponse</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Bi-directional streaming</span></span>
<span class="line">  <span class="token keyword">rpc</span> <span class="token function">StreamingBothWays</span> <span class="token punctuation">(</span><span class="token keyword">stream</span> <span class="token class-name">ExampleRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token keyword">stream</span> <span class="token class-name">ExampleResponse</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="protobuf" tabindex="-1"><a class="header-anchor" href="#protobuf"><span>Protobuf</span></a></h2><h3 id="protobuf消息" tabindex="-1"><a class="header-anchor" href="#protobuf消息"><span>Protobuf消息</span></a></h3><p>消息是 Protobuf 中的主要数据传输对象。 它们在概念上类似于 .NET 类。</p><div class="language-protobuf line-numbers-mode" data-highlighter="prismjs" data-ext="protobuf" data-title="protobuf"><pre class="language-protobuf"><code><span class="line"><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">option</span> csharp_namespace <span class="token operator">=</span> <span class="token string">&quot;Contoso.Messages&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">message</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">int32</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">string</span> first_name <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">string</span> last_name <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面的消息定义将三个字段指定为名称/值对。 与 .NET 类型上的属性类似，每个字段都有名称和类型。 字段类型可以是<a href="#%E6%A0%87%E9%87%8F%E5%80%BC%E7%B1%BB%E5%9E%8B">Protobuf标量值类型</a>（如 int32），也可以是其他消息。</p><p><a href="https://developers.google.com/protocol-buffers/docs/style" target="_blank" rel="noopener noreferrer">Protobuf 样式指南</a>建议使用<code>underscore_separated_names</code>作为字段名称。为.NET应用创建的新Protobuf消息应遵循Protobuf样式准则。.NET工具会自动生成使用.NET命名标准的.NET类型。例如，<code>first_name</code>Protobuf字段生成<code>FirstName</code>.NET属性。</p><p>包括名称，消息定义中的每个字段都有一个唯一的编号。 消息序列化为 Protobuf 时，字段编号用于标识字段。 序列化一个小编号比序列化整个字段名称要快。 因为字段编号标识字段，所以在更改编号时务必小心。</p><h3 id="标量值类型" tabindex="-1"><a class="header-anchor" href="#标量值类型"><span>标量值类型</span></a></h3><p>Protobuf 支持一系列本机标量值类型。 下表列出了全部本机标量值类型及其等效 C# 类型：</p><table><thead><tr><th>Protobuf 类型</th><th>C# 类型</th></tr></thead><tbody><tr><td>double</td><td>double</td></tr><tr><td>float</td><td>float</td></tr><tr><td>int32</td><td>int</td></tr><tr><td>int64</td><td>long</td></tr><tr><td>uint32</td><td>uint</td></tr><tr><td>uint64</td><td>ulong</td></tr><tr><td>sint32</td><td>int</td></tr><tr><td>sint64</td><td>long</td></tr><tr><td>fixed32</td><td>uint</td></tr><tr><td>fixed64</td><td>ulong</td></tr><tr><td>sfixed32</td><td>int</td></tr><tr><td>sfixed64</td><td>long</td></tr><tr><td>bool</td><td>bool</td></tr><tr><td>string</td><td>string</td></tr><tr><td>bytes</td><td>ByteString</td></tr></tbody></table><p>标量值始终具有默认值，并且该默认值不能设置为 <code>null</code>。 此约束包括 <code>string</code> 和 <code>ByteString</code>，它们都属于 C# 类。 <code>string</code> 默认为空字符串值，<code>ByteString</code> 默认为空字节值。 尝试将它们设置为 <code>null</code> 会引发错误。</p><p><a href="https://learn.microsoft.com/zh-cn/aspnet/core/grpc/protobuf?view=aspnetcore-7.0#nullable-types" target="_blank" rel="noopener noreferrer">可为 null 的包装器类型</a>可用于支持 null 值。</p><hr><p>更多信息请参考<a href="#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5">相关链接</a></p><h2 id="相关链接" tabindex="-1"><a class="header-anchor" href="#相关链接"><span>相关链接</span></a></h2><ul><li><a href="https://learn.microsoft.com/zh-cn/aspnet/core/grpc/protobuf" target="_blank" rel="noopener noreferrer">为 .NET 应用创建 Protobuf 消息</a></li></ul>`,21),o=[p];function l(r,c){return a(),n("div",null,o)}const d=s(t,[["render",l],["__file","grpc.html.vue"]]),u=JSON.parse('{"path":"/archive/grpc.html","title":"GRPC","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Protobuf","slug":"protobuf","link":"#protobuf","children":[{"level":3,"title":"Protobuf消息","slug":"protobuf消息","link":"#protobuf消息","children":[]},{"level":3,"title":"标量值类型","slug":"标量值类型","link":"#标量值类型","children":[]}]},{"level":2,"title":"相关链接","slug":"相关链接","link":"#相关链接","children":[]}],"git":{},"filePathRelative":"archive/grpc.md"}');export{d as comp,u as data};
