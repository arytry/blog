import{_ as s,c as n,o as a,e}from"./app-0TPXc-ei.js";const p="/assets/img/algorithms/sort-classify.png",l="/assets/img/algorithms/sort-algorithmic-complexity.png",t="/assets/img/algorithms/sort-bubble.gif",o={},i=e('<h1 id="排序算法" tabindex="-1"><a class="header-anchor" href="#排序算法"><span>排序算法</span></a></h1><p>十种常见排序算法可以分为两大类：</p><ol><li><p>比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。</p></li><li><p>非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。</p></li></ol><p><img src="'+p+'" alt="排序算法" title="排序算法"></p><p>算法复杂度比较</p><p><img src="'+l+'" alt="算法复杂度" title="算法复杂度"></p><ul><li>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</li><li>不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</li><li>时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</li><li>空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。</li></ul><h2 id="冒泡排序-bubble-sort" tabindex="-1"><a class="header-anchor" href="#冒泡排序-bubble-sort"><span>冒泡排序（Bubble Sort）</span></a></h2><p>冒泡排序是一种简单的排序算法。它重复地走访要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h3 id="操作步骤" tabindex="-1"><a class="header-anchor" href="#操作步骤"><span>操作步骤</span></a></h3><ol><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤1~3，直到排序完成。</li></ol><h3 id="动图演示" tabindex="-1"><a class="header-anchor" href="#动图演示"><span>动图演示</span></a></h3><p><img src="'+t+`" alt="冒泡排序" title="冒泡排序"></p><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 取数组长度然后-1</span></span>
<span class="line">    <span class="token comment">// 下面嵌套的循环都不需要循环最后一个元素</span></span>
<span class="line">    <span class="token comment">// 当循环最后一个元素的上一个元素时(arr.length-1)，需要和它的下一个元素作比较，这就已经知道最后一个元素是否需要交换位置</span></span>
<span class="line">    <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//定义一个标识，当数组不需要交换位置后直接跳出循环</span></span>
<span class="line">    <span class="token keyword">var</span> flag<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 每次外循环标识重置，判断是否有元素交换位置</span></span>
<span class="line">        <span class="token comment">// 如果数组元素不需要交换位置，时间复杂度是O(n)，也就是嵌套循环执行一次，然后外循环跳出</span></span>
<span class="line">        <span class="token comment">// 如果数组元素都要交换位置，时间复杂度是O(n^2)，嵌套循环和外循环都要依次执行</span></span>
<span class="line">        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">var</span> current <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> next <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">&gt;</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 相邻元素两两对比</span></span>
<span class="line">                <span class="token keyword">var</span> temp <span class="token operator">=</span> next<span class="token punctuation">;</span>       <span class="token comment">// 元素交换</span></span>
<span class="line">                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span></span>
<span class="line">                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> arr<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关链接" tabindex="-1"><a class="header-anchor" href="#相关链接"><span>相关链接</span></a></h2><ul><li><a href="https://www.cnblogs.com/onepixel/articles/7674659.html" title="十大经典排序算法（动图演示）" target="_blank" rel="noopener noreferrer">十大经典排序算法（动图演示）</a></li></ul>`,17),c=[i];function r(u,k){return a(),n("div",null,c)}const m=s(o,[["render",r],["__file","sort.html.vue"]]),v=JSON.parse('{"path":"/algorithms/sort.html","title":"排序算法","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"冒泡排序（Bubble Sort）","slug":"冒泡排序-bubble-sort","link":"#冒泡排序-bubble-sort","children":[{"level":3,"title":"操作步骤","slug":"操作步骤","link":"#操作步骤","children":[]},{"level":3,"title":"动图演示","slug":"动图演示","link":"#动图演示","children":[]},{"level":3,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]}]},{"level":2,"title":"相关链接","slug":"相关链接","link":"#相关链接","children":[]}],"git":{},"filePathRelative":"algorithms/sort.md"}');export{m as comp,v as data};
