import{_ as n,c as s,o as a,e}from"./app-0TPXc-ei.js";const p={},t=e(`<blockquote><p>我们知道在Code First中可以通过数据注解或者Flunt Api两种方式对模型进行约定。但是这种默认的约定方式也有一定的限制，比如想要配置所有模型的ID属性为主键，我们需要多个单独的实体配置，这明显是劳动力过剩，做重复的生产力工作。不过.net为我们提供了便捷的方式来解决这个问题，不过在EntityFramework和EntityFramework Core中处理的方式不同。</p></blockquote><h2 id="entityframework" tabindex="-1"><a class="header-anchor" href="#entityframework"><span>EntityFramework</span></a></h2><h3 id="自定义约定" tabindex="-1"><a class="header-anchor" href="#自定义约定"><span>自定义约定</span></a></h3><p>在模型生成器上启用约定，可以通过在上下文中重写<code>OnModelCreating</code>来访问这些约定。</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span><span class="token class-name">DbModelBuilder</span> modelBuilder<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    modelBuilder</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Name <span class="token operator">==</span> p<span class="token punctuation">.</span>DeclaringType<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span><span class="token function">IsKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将属性类型为byte[]并且名称为RowVersion的属性对应的字段标记为行版本（时间戳）。</span></span>
<span class="line">    modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Properties</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;RowVersion&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span><span class="token function">IsRowVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将类型为DateTime的属性对应的字段类型设置为DateTime2。</span></span>
<span class="line">    modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Properties</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span></span>
<span class="line">            m<span class="token punctuation">.</span><span class="token function">HasColumnType</span><span class="token punctuation">(</span><span class="token string">&quot;DateTime2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnModelCreating</span><span class="token punctuation">(</span>modelBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="约定类" tabindex="-1"><a class="header-anchor" href="#约定类"><span>约定类</span></a></h3><p>定义约定的另一种方法是使用约定类封装约定。 使用约定类时，将创建一个从<code>System.Data.Entity.ModelConfiguration</code>命名空间中的约定类继承的类型。</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTime2Convention</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Convention</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">DateTime2Convention</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Properties</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">HasColumnType</span><span class="token punctuation">(</span><span class="token string">&quot;datetime2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若要告诉 EF 使用此约定，请将其添加到 OnModelCreating 中的约定集合。</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span><span class="token class-name">DbModelBuilder</span> modelBuilder<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Properties</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span><span class="token function">IsKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    modelBuilder<span class="token punctuation">.</span>Conventions<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime2Convention</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如您所见，我们将约定的实例添加到约定集合。 从约定继承提供了一种在团队或项目之间进行分组和共享约定的便利方法。 例如，你可以有一个类库，其中包含所有组织项目使用的一组通用约定。</p><h3 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读"><span>扩展阅读</span></a></h3><p><a href="https://docs.microsoft.com/en-us/ef/ef6/modeling/code-first/conventions/custom" title="自定义 Code First 约定" target="_blank" rel="noopener noreferrer">Custom Code First Conventions</a></p><h2 id="entityframework-core" tabindex="-1"><a class="header-anchor" href="#entityframework-core"><span>EntityFramework Core</span></a></h2><p>在EF Core中约定内置在ModelBuilder里面，而没有单独的使用<code>Conventions</code>来单独指定约定。</p><h3 id="约定" tabindex="-1"><a class="header-anchor" href="#约定"><span>约定</span></a></h3><p>我们可以通过请求<code>ModelBuilder.Model.GetEntityTypes()</code>获取类型。</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span><span class="token class-name">ModelBuilder</span> modelBuilder<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> keyProperties <span class="token operator">=</span> modelBuilder</span>
<span class="line">        <span class="token punctuation">.</span>Model</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">GetEntityTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> rowVersionProperties <span class="token operator">=</span> keyProperties<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span></span>
<span class="line">        m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>ClrType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;RowVersion&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> rowVersionProperties<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        modelBuilder<span class="token punctuation">.</span><span class="token function">Entity</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>DeclaringEntityType<span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">IsRowVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> dateTimeProperties <span class="token operator">=</span> keyProperties<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span></span>
<span class="line">        m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>ClrType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DateTime</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> dateTimeProperties<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">       modelBuilder<span class="token punctuation">.</span><span class="token function">Entity</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>DeclaringEntityType<span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line">           <span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line">           <span class="token punctuation">.</span><span class="token function">HasColumnType</span><span class="token punctuation">(</span><span class="token string">&quot;DateTime2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnModelCreating</span><span class="token punctuation">(</span>modelBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="相关链接" tabindex="-1"><a class="header-anchor" href="#相关链接"><span>相关链接</span></a></h3><p><a href="https://stackoverflow.com/questions/52127903/use-dbmodelbuilder-in-net-core-to-use-specify-naming-conventions" title="Use DbModelBuilder in .NET Core to use specify naming conventions" target="_blank" rel="noopener noreferrer">Use DbModelBuilder in .NET Core to use specify naming conventions</a></p>`,20),o=[t];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","custom-code-first-conventions.html.vue"]]),k=JSON.parse('{"path":"/archive/custom-code-first-conventions.html","title":"自定义Code First约定","lang":"zh-CN","frontmatter":{"title":"自定义Code First约定","date":"2020-06-03T01:13:00.000Z","categories":["Code First"],"tags":["Code First","Conventions"]},"headers":[{"level":2,"title":"EntityFramework","slug":"entityframework","link":"#entityframework","children":[{"level":3,"title":"自定义约定","slug":"自定义约定","link":"#自定义约定","children":[]},{"level":3,"title":"约定类","slug":"约定类","link":"#约定类","children":[]},{"level":3,"title":"扩展阅读","slug":"扩展阅读","link":"#扩展阅读","children":[]}]},{"level":2,"title":"EntityFramework Core","slug":"entityframework-core","link":"#entityframework-core","children":[{"level":3,"title":"约定","slug":"约定","link":"#约定","children":[]},{"level":3,"title":"相关链接","slug":"相关链接","link":"#相关链接","children":[]}]}],"git":{},"filePathRelative":"archive/custom-code-first-conventions.md"}');export{r as comp,k as data};
