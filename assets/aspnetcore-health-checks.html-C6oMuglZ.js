import{_ as n,c as s,o as a,e}from"./app-0TPXc-ei.js";const p={},t=e(`<h1 id="asp-net-core-健康检查" tabindex="-1"><a class="header-anchor" href="#asp-net-core-健康检查"><span>ASP.NET Core 健康检查</span></a></h1><div class="custom-container tip"><p class="custom-container-title">提示</p><p>工具：<code>VS2019</code></p><p>框架：<code>ASP.NET Core5.0</code></p><p>说明：.net core5.0之前和5.0版本的健康检查有一定差异，这里只讲解5.0版本的使用</p></div><h2 id="健康检查healthchecks" tabindex="-1"><a class="header-anchor" href="#健康检查healthchecks"><span>健康检查HealthChecks</span></a></h2><h3 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h3><p>首先引入包<code>Microsoft.Extensions.Diagnostics.HealthChecks</code></p><p>在<code>Startup.ConfigureServices</code>中使用<code>AddHealthChecks</code>注册运行状况检查服务。 通过在<code>Startup.Configure</code>中调用<code>MapHealthChecks</code>来创建运行状况检查终结点。 在示例应用中，在<code>/health</code>处创建运行状况检查终结点</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        services<span class="token punctuation">.</span><span class="token function">AddHealthChecks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            endpoints<span class="token punctuation">.</span><span class="token function">MapHealthChecks</span><span class="token punctuation">(</span><span class="token string">&quot;/health&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动项目，通过访问<code>/health</code>路径查看应用状态，这样一个简单的健康检查其实就算完了</p><h3 id="自定义检查" tabindex="-1"><a class="header-anchor" href="#自定义检查"><span>自定义检查</span></a></h3><p>通过<code>AddCheck</code>方法实现自定义检查</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line">services<span class="token punctuation">.</span><span class="token function">AddHealthChecks</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddCheck</span><span class="token punctuation">(</span><span class="token string">&quot;Example&quot;</span><span class="token punctuation">,</span> _ <span class="token operator">=&gt;</span></span>
<span class="line">        HealthCheckResult<span class="token punctuation">.</span><span class="token function">Healthy</span><span class="token punctuation">(</span><span class="token string">&quot;Example is OK!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">tags</span><span class="token punctuation">:</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;example&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以调用该方法的泛型模式，首先需要定义一个继承自<code>IHealthCheck</code>的接口</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleHealthCheck</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHealthCheck</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>HealthCheckResult<span class="token punctuation">&gt;</span></span> <span class="token function">CheckHealthAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">HealthCheckContext</span> context<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name">CancellationToken</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> healthCheckResultHealthy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>healthCheckResultHealthy<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span></span>
<span class="line">                HealthCheckResult<span class="token punctuation">.</span><span class="token function">Healthy</span><span class="token punctuation">(</span><span class="token string">&quot;A healthy result.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span></span>
<span class="line">            HealthCheckResult<span class="token punctuation">.</span><span class="token function">Unhealthy</span><span class="token punctuation">(</span><span class="token string">&quot;An unhealthy result.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后通过调用该接口实现自定义健康检查</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line">services<span class="token punctuation">.</span><span class="token function">AddHealthChecks</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddCheck</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ExampleHealthCheck<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;example_health_check&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="健康检查库" tabindex="-1"><a class="header-anchor" href="#健康检查库"><span>健康检查库</span></a></h3><p>可以对数据库、redis等进行检查，比如mysql，需要先引入<code>HealthChecks.MySql</code>库，然后在<code>ConfigureServices</code>方法中添加如下代码即可</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    services<span class="token punctuation">.</span><span class="token function">AddHealthChecks</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">AddMySql</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token named-parameter punctuation">connectionString</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;MySqlConnection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token named-parameter punctuation">failureStatus</span><span class="token punctuation">:</span> HealthStatus<span class="token punctuation">.</span>Degraded<span class="token punctuation">,</span></span>
<span class="line">            <span class="token named-parameter punctuation">tags</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;db&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sql&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mysql&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果要对Redis进行检查，先引入<code>HealthChecks.Redis</code>库，然后照猫画虎直接在后面调用<code>AddRedis()</code>，还有其它多种检查也是一样</p></blockquote><h3 id="自定义输出" tabindex="-1"><a class="header-anchor" href="#自定义输出"><span>自定义输出</span></a></h3><h4 id="全部输出" tabindex="-1"><a class="header-anchor" href="#全部输出"><span>全部输出</span></a></h4><p>现在我们知道健康检查可以对多种业务进行检查，如果一个项目有多项检查，此时通过访问<code>/health</code>地址其实只能看到一个输出值，这其实是没有意义的，要想看到完整的输出结果，只需要稍微改造一下代码即可</p><p>在<code>Startup.Configure</code>中，将<code>HealthCheckOptions.ResponseWriter</code>选项设置为编写响应的委托：</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        endpoints<span class="token punctuation">.</span><span class="token function">MapHealthChecks</span><span class="token punctuation">(</span><span class="token string">&quot;/health&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HealthCheckOptions</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Predicate <span class="token operator">=</span> _ <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">            ResponseWriter <span class="token operator">=</span> UIResponseWriter<span class="token punctuation">.</span>WriteHealthCheckUIResponse</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在访问<code>/health</code>地址就能看到一串json数据，该数据包含了所有检查项目的健康状况</p><h4 id="部分输出" tabindex="-1"><a class="header-anchor" href="#部分输出"><span>部分输出</span></a></h4><p>如果我们实现了多项健康检查，现在想输出部分结果，比如提供给consul做心跳包检测，可以对<code>HealthCheckOptions</code>的<code>Predicate</code>参数做过滤</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        services<span class="token punctuation">.</span><span class="token function">AddHealthChecks</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">AddCheck</span><span class="token punctuation">(</span><span class="token string">&quot;self&quot;</span><span class="token punctuation">,</span> _ <span class="token operator">=&gt;</span></span>
<span class="line">                HealthCheckResult<span class="token punctuation">.</span><span class="token function">Healthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">tags</span><span class="token punctuation">:</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;self&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            endpoints<span class="token punctuation">.</span><span class="token function">MapHealthChecks</span><span class="token punctuation">(</span><span class="token string">&quot;/liveness&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HealthCheckOptions</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                Predicate <span class="token operator">=</span> r <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;self&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="引入ui" tabindex="-1"><a class="header-anchor" href="#引入ui"><span>引入UI</span></a></h2><blockquote><p><strong>UI独立于健康检查，可以远程调用，只需要知道前面提到的<code>/health</code>地址完整的输出结果，一定要是完整的结果才行</strong></p></blockquote><h3 id="注册" tabindex="-1"><a class="header-anchor" href="#注册"><span>注册</span></a></h3><p>首先引入<code>HealthChecks.UI</code>库，然后在<code>Starup.ConfigureServices</code>中使用<code>AddHealthChecksUI</code>注册，在<code>Startup.Configure</code>中调用<code>MapHealthChecksUI</code>创建UI终结点</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        services<span class="token punctuation">.</span><span class="token function">AddHealthChecksUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">AddInMemoryStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将记录存储到内存中</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            endpoints<span class="token punctuation">.</span><span class="token function">MapHealthChecksUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h3><ul><li>调用<code>AddHealthChecksUI()</code>方法默认读取的配置文件，所以还需要在appsettings.json中添加配置信息，以下添加了2个站点的健康检查终结点</li></ul><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;HealthChecksUI&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;HealthChecks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Example1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;Uri&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:57941/health&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Example2&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;Uri&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:52382/health&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;Webhooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;Uri&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;Payload&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;RestoredPayload&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;EvaluationTimeInSeconds&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;MinimumSecondsBetweenFailureNotifications&quot;</span><span class="token operator">:</span> <span class="token number">60</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当然我们也可以不用配置文件，而直接通过传参的方式来调用</li></ul><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line">services<span class="token punctuation">.</span><span class="token function">AddHealthChecksUI</span><span class="token punctuation">(</span>setup <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    setup<span class="token punctuation">.</span><span class="token function">AddHealthCheckEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;endpoint1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8001/health&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    setup<span class="token punctuation">.</span><span class="token function">AddHealthCheckEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;endpoint2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://remoteendpoint:9000/health&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    setup<span class="token punctuation">.</span><span class="token function">AddWebhookNotification</span><span class="token punctuation">(</span><span class="token string">&quot;webhook1&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">uri</span><span class="token punctuation">:</span> <span class="token string">&quot;http://httpbin.org/status/200?code=ax3rt56s&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">payload</span><span class="token punctuation">:</span> <span class="token string">&quot;{...}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里整个UI的配置和代码就已经完成了，现在我们可以启动该站点访问<code>/healthchecks-ui</code>路径查看效果</p><h3 id="健康状况记录存储" tabindex="-1"><a class="header-anchor" href="#健康状况记录存储"><span>健康状况记录存储</span></a></h3><p>ASP.NET Core 5.0中健康检查UI展示结果是从前面指定的<code>/health</code>地址获取，但是每一项检查的健康状态都可能会发生变化，为了看到每一项的健康状况记录，UI自身指定了结果存储集，可以存储到内存、数据库等数据集中，通过引入不同的库（<code>HealthChecks.UI.XXX.Storage</code>）来指定</p><p>以下示例展示保存结果到MySQL中，首先引入<code>HealthChecks.UI.MySql.Storage</code>库</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    services<span class="token punctuation">.</span><span class="token function">AddHealthChecksUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">AddMySqlStorage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;MySqlConnection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跳转到ui" tabindex="-1"><a class="header-anchor" href="#跳转到ui"><span>跳转到UI</span></a></h3><p>因为我是单独起的一个项目来展示UI，所以为了方便做了一个跳转</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    endpoints<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> context <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 直接跳转到健康检查UI首页</span></span>
<span class="line">        context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span><span class="token string">&quot;/healthchecks-ui&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">await</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        endpoints<span class="token punctuation">.</span><span class="token function">MapHealthChecksUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关链接" tabindex="-1"><a class="header-anchor" href="#相关链接"><span>相关链接</span></a></h2><ul><li><a href="https://blog.zhaytam.com/2020/04/30/health-checks-aspnetcore/" title="HEALTH CHECKS IN ASP.NET CORE" target="_blank" rel="noopener noreferrer">HEALTH CHECKS IN ASP.NET CORE</a></li><li><a href="https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks" title="AspNetCore.Diagnostics.HealthChecks" target="_blank" rel="noopener noreferrer">AspNetCore.Diagnostics.HealthChecks</a></li><li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-5.0" title="ASP.NET Core 中的运行状况检查" target="_blank" rel="noopener noreferrer">ASP.NET Core 中的运行状况检查</a></li></ul>`,48),c=[t];function l(o,i){return a(),s("div",null,c)}const r=n(p,[["render",l],["__file","aspnetcore-health-checks.html.vue"]]),d=JSON.parse('{"path":"/archive/aspnetcore-health-checks.html","title":"ASP.NET Core 健康检查","lang":"zh-CN","frontmatter":{"date":"2021-01-20T16:02:19.000Z","categories":null,"tags":null},"headers":[{"level":2,"title":"健康检查HealthChecks","slug":"健康检查healthchecks","link":"#健康检查healthchecks","children":[{"level":3,"title":"基本操作","slug":"基本操作","link":"#基本操作","children":[]},{"level":3,"title":"自定义检查","slug":"自定义检查","link":"#自定义检查","children":[]},{"level":3,"title":"健康检查库","slug":"健康检查库","link":"#健康检查库","children":[]},{"level":3,"title":"自定义输出","slug":"自定义输出","link":"#自定义输出","children":[]}]},{"level":2,"title":"引入UI","slug":"引入ui","link":"#引入ui","children":[{"level":3,"title":"注册","slug":"注册","link":"#注册","children":[]},{"level":3,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[]},{"level":3,"title":"健康状况记录存储","slug":"健康状况记录存储","link":"#健康状况记录存储","children":[]},{"level":3,"title":"跳转到UI","slug":"跳转到ui","link":"#跳转到ui","children":[]}]},{"level":2,"title":"相关链接","slug":"相关链接","link":"#相关链接","children":[]}],"git":{},"filePathRelative":"archive/aspnetcore-health-checks.md"}');export{r as comp,d as data};
